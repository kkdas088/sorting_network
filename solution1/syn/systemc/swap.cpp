// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "swap.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic swap::ap_const_logic_1 = sc_dt::Log_1;
const bool swap::ap_const_boolean_1 = true;
const sc_logic swap::ap_const_logic_0 = sc_dt::Log_0;

swap::swap(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return_0);
    sensitive << ( y_V_read );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( x_V_read );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "swap_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_V_read, "(port)x_V_read");
    sc_trace(mVcdFile, y_V_read, "(port)y_V_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif

    }
}

swap::~swap() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void swap::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void swap::thread_ap_return_0() {
    ap_return_0 = y_V_read.read();
}

void swap::thread_ap_return_1() {
    ap_return_1 = x_V_read.read();
}

}

